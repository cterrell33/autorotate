AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Enviornment for the "lab"

Parameters:
  ImageId:
    Description: AMI ID
    Type: AWS::EC2::Image::Id
  Linux:
    Description: AMI ID
    Type: AWS::EC2::Image::Id
  InstanceType:
    Description: Server EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t2.micro
      - t2.medium
      - t3.micro
      - t3.medium
  VpcId:
    Description: VPC
    Type: "AWS::EC2::VPC::Id"
  SubnetIDs:
    Description: Subnets
    Type: "List<AWS::EC2::Subnet::Id>"
  Password:
    Description: Password
    Type: String
  RDPLocation:
    Description: The IP address range that can be used to RDP to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  RouteTable:
    Description: Route Table Id
    Type: String


Resources:
  secret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: test2
      SecretString: password1!

  WindowsEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: "lab"
      ImageId: !Ref ImageId
      IamInstanceProfile: !Ref EC2InstanceProfile
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref InstanceSecurityGroup 
      Tags:
        - Key: "Name"
          Value: "Windows_Server"
      UserData:
        Fn::Base64: !Sub |
            <powershell>
            $apassword = ConvertTo-SecureString "password1!!" -AsPlainText -Force
            $accountpassword = ConvertTo-SecureString "password1!" -AsPlainText -Force
            $users = "admin","test1","test2"
            Add-WindowsFeature AD-Domain-Services
            Install-ADDSForest -DomainName "lab.example.com" -InstallDNS -SafeModeAdministratorPassword $apassword -Force
            Install-WindowsFeature -Name GPMC,RSAT-AD-PowerShell,RSAT-AD-AdminCenter,RSAT-ADDS-Tools,RSAT-DNS-Server
            foreach ($u in $users){
            New-ADUser -Name $u -AccountPassword $accountpassword -SamAccountName $u -UserPrincipalName $u@lab.example.com -Enabled $true
            Add-ADGroupMember -Identity "Domain Admins" -Members $u
            }
            Enable-WindowsOptionalFeature -Online -FeatureName SMB1Protocol -All
            Set-GPLink -name "Default Domain Policy" -Target "dc=lab,dc=example,dc=com" -linkenabled no
            </powershell>
            <persist>true</persist>
            #Still need to edit local group policy to get this working out the box

  LinuxEC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: "lab"
      ImageId: !Ref Linux
      SecurityGroups:
        - !Ref InstanceSecurityGroup   
      IamInstanceProfile: !Ref EC2InstanceProfile
      InstanceType: !Ref InstanceType   
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install samba -y
      Tags:
        - Key: "Name"
          Value: "Linux_Node"

  EC2InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMDirectoryServiceAccess
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonS3FullAccess
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AWSCloudFormationReadOnlyAccess
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonEC2FullAccess
    
  EC2InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
        - !Ref EC2InstanceRole

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable RDP access
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: !Ref RDPLocation

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties: 
      Name: PasswordChanger
      Artifacts: 
        Type: NO_ARTIFACTS
      Description: to change ldap password
      Environment: 
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: 'aws/codebuild/amazonlinux2-x86_64-standard:4.0'
      ServiceRole: !GetAtt CodeBuildRole1.Arn
      Source: 
        Type: GITHUB
        Location: 'https://github.com/cterrell33/autorotate.git'
      TimeoutInMinutes: 10


#  CodeBuildRole:
#    Type: 'AWS::IAM::Role'
#    Properties:
#      AssumeRolePolicyDocument:
#        Statement:
#          - Action:
#              - 'sts:AssumeRole'
#            Effect: Allow
#            Principal:
#              Service:
#                - codebuild.amazonaws.com
#                - secretsmanager.amazonaws.com
#        Version: 2012-10-17
#      Path: /
#      Policies:
#        - PolicyName: CodeBuildAccess
#          PolicyDocument:
#            Version: 2012-10-17
#            Statement:
#              - Action:
#                  - 'logs:CreateLogGroup'
#                  - 'logs:PutLogEvents'
#                  - 'logs:CreateLogStream'
#                  - 'ecr:*'
#                  - 'codebuild:CreateReportGroup'
#                  - 'codebuild:CreateReport'
#                  - 'codebuild:UpdateReport'
#                  - 'codebuild:BatchPutCodeCoverages'
#                  - 'codebuild:BatchPutTestCases'
#                  - 'ssm:GetParameters'
#                Effect: Allow
#                Resource: '*'
  
  CodeBuildRole1:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
                - secretsmanager.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AWSCodeBuildAdminAccess

  Routetable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VpcId
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      ConnectivityType: public
      SubnetId: subnet-0f05a45a07786d0fc
  NATGatewayEIP:
   Type: AWS::EC2::EIP
   Properties:
      Domain: !Ref VpcId

Outputs:
  InstanceSecurityGroup:
    Description: Windows Server Security Group
    Value: !Ref InstanceSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-InstanceSecurityGroup"
  EC2InstanceProfile:
    Description: Windows ec2 Instance Profile
    Value: !Ref EC2InstanceProfile
    Export:
      Name: !Sub "${AWS::StackName}-EC2InstanceProfile"